{
  "name": "complexity-report",
  "version": "0.9.1",
  "author": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com"
  },
  "description": "A tool for reporting code complexity metrics in JavaScript projects.",
  "contributors": [
    {
      "name": "Phil Booth",
      "email": "pmbooth@gmail.com"
    },
    {
      "name": "Juzer Ali"
    },
    {
      "name": "Mark Trostler"
    },
    {
      "name": "Wyatt Preul"
    }
  ],
  "bin": {
    "cr": "./src/cli.js"
  },
  "main": "./src/complexityReport.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/philbooth/complexityReport.js"
  },
  "keywords": [
    "complexity",
    "simplicity",
    "cyclomatic",
    "halstead",
    "maintainability",
    "static",
    "analysis",
    "metrics",
    "esprima"
  ],
  "dependencies": {
    "check-types": "0.3.x",
    "esprima": "1.0.x",
    "commander": "1.1.x"
  },
  "devDependencies": {
    "jake": "0.5.x",
    "jshint": "0.9.x",
    "mocha": "1.8.x",
    "chai": "1.4.x"
  },
  "license": "MIT",
  "scripts": {
    "test": "jake test"
  },
  "readme": "# complexityReport.js\n\n[![Build status][ci-image]][ci-status]\n\nA tool for reporting code complexity metrics in JavaScript projects.\nCurrently the tool reports on:\n\n* lines of code;\n* cyclomatic complexity;\n* Halstead metrics;\n* maintainability index.\n\n[Here is an example report][eg].\n\nThe tool can be configured to fail\nwhen complexity metrics pass a specified threshold,\nto aid its usefulness in automated environments / CI.\nThere are also options\nfor controlling how metrics are calculated\nand the format of the report output.\n\nThe metrics are calculated by walking syntax trees\ngenerated by the [Esprima] parser.\n\nFor people who are only interested in analysing small amounts of code\nand don't want to download the tool,\nthere is also a web front-end available:\n\n* [JSComplexity.org][jscomplexity]\n\n## Installation\n\n### Local to the current project\n\n```\nnpm install complexity-report\n```\n\n### Globally for all projects\n\n```\nsudo npm install -g complexity-report\n```\n\n## Usage\n\n### From the command line\n\n```\ncr [options] <file...>\n```\n\nThe tool will recursively read files\nfrom any directories that it encounters\nautomatically.\n\n#### Options\n\n* `-o <file>`: Specify an output file for the report,\n  defaults to `stdout`.\n* `-f <format>`: Specify an output format for the report,\n  defaults to `plain`.\n* `-a`: Include hidden files in the report.\n* `-m <maintainability>`: Specify the per-module maintainability index threshold\n  (beyond which, the process will fail when exiting).\n* `-c <complexity>`: Specify the per-function cyclomatic complexity threshold\n  (beyond which, the process will fail when exiting).\n* `-d <difficulty>`: Specify the per-function Halstead difficulty threshold\n  (beyond which, the process will fail when exiting).\n* `-v <volume>`: Specify the per-function Halstead volume threshold\n  (beyond which, the process will fail when exiting).\n* `-e <effort>`: Specify the per-function Halstead effort threshold\n  (beyond which, the process will fail when exiting).\n* `-s`: Silences the console output.\n* `-l`: Disregards operator `||` as a source of cyclomatic complexity.\n* `-w`: Disregards `switch` statements as a source of cyclomatic complexity.\n* `-i`: Treats `for`...`in` loops as a source of cyclomatic complexity.\n* `-t`: Treats `catch` clauses as a source of cyclomatic complexity.\n* `-n`: Uses the [Microsoft-variant maintainability index][msvariant].\n\n#### Output formats\n\nCurrently there are five output formats supported:\n`plain`,\n`markdown`,\n`minimal`,\n`json`\nand `xml`.\nThese are loaded with `require`\nfrom the `src/formats` subdirectory\nand adding new formats is really easy.\nEach format module must export a function `format`,\nwhich takes a report object as its only argument\nand returns its string representation of the report.\nSee `src/formats/plain.js` for an example format.\n\n### From code\n\n#### Loading the library\n\n```\nvar cr = require('complexity-report');\n```\n\n#### Calling the library\n\n```\nvar report = cr.run(source, options);\n```\n\nThe argument `source` must be a string\ncontaining the source code that is to be analysed.\nThe argument `options` is an optional object\nwhich may contain properties that modify\ncyclomatic complexity calculation.\nThe following options are available:\n\n* `logicalor`: Boolean indicating whether operator `||`\n  should be considered a source of cyclomatic complexity,\n  defaults to `true`.\n* `switchcase`: Boolean indicating whether `switch` statements\n  should be considered a source of cyclomatic complexity,\n  defaults to `true`.\n* `forin`: Boolean indicating whether `for`...`in` loops\n  should be considered a source of cyclomatic complexity,\n  defaults to `false`.\n* `trycatch`: Boolean indicating whether `catch` clauses\n  should be considered a source of cyclomatic complexity,\n  defaults to `false`.\n* `newmi`: Boolean indicating whether the maintainability\n  index should be rebased on a scale from 0 to 100.\n\nThe returned report is an object\nthat contains properties detailing the complexity\nof each function from the source code.\nThere is also\na maintainability index\nas well as aggregate complexity metrics\nfor the source in its entirety.\n\n## Related projects\n\nVisualizations:\n\n* [Gleb Bahmutov][gleb]'s [js-complexity-viz];\n* [Jarrod Overson][jarrod]'s [Plato].\n\nBuild tools:\n\n* [Viget Labs][viget]' [grunt-complexity];\n* [Cliffano Subagio][cliffano]'s [Bob];\n* [Cardio].\n\n## Development\n\n### Roadmap\n\nThe short-term plan is\nto write more output formats\nand open up lots more options\nfor external configuration of the analysis.\n\nI also need to spend some time\nthrowing more complex test cases at it,\nto flush out all of the edge cases\nthat I'm probably not yet handling.\nTo this end,\nit would be great to hear from people\nthat have run the tool\nagainst their own codebases.\nThe bigger and uglier, the better!\nIf you spot any issues,\nplease raise them in the [tracker].\n\nIn the longer term,\nI have some vague ideas concerning\nhow to track trends in a codebase over time.\nVisualisations is another area that could be pretty sweet to look into.\n\nIf you think there's anything else I should look at,\nplease raise an issue or, even better,\nfeel free to implement it and submit a pull request! `:)`\n\n### Dependencies\n\nThe build environment relies on\n[Node.js][node],\n[NPM],\n[Jake],\n[JSHint],\n[Mocha] and\n[Chai].\nAssuming that you already have Node.js and NPM set up,\nyou just need to run `npm install`\nto install all of the dependencies\nas listed in `package.json`.\n\n### Tests\n\nThe tests are in `test/complexityReport.js`. You can run them with the\ncommand `npm test` or `jake test`.\n\n[ci-image]: https://secure.travis-ci.org/philbooth/complexityReport.js.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/complexityReport.js\n[eg]: https://github.com/philbooth/complexityReport.js/blob/master/SELF.md\n[esprima]: http://esprima.org/\n[jscomplexity]: http://jscomplexity.org/\n[msvariant]: http://blogs.msdn.com/b/codeanalysis/archive/2007/11/20/maintainability-index-range-and-meaning.aspx\n[gleb]: https://github.com/bahmutov\n[js-complexity-viz]: https://github.com/bahmutov/js-complexity-viz\n[jarrod]: http://jarrodoverson.com/blog/about\n[plato]: https://github.com/jsoverson/plato\n[viget]: http://viget.com/\n[grunt-complexity]: https://github.com/vigetlabs/grunt-complexity\n[cliffano]: http://blog.cliffano.com/\n[bob]: https://github.com/cliffano/bob\n[cardio]: https://github.com/auchenberg/cardio\n[tracker]: https://github.com/philbooth/complexityReport.js/issues\n[node]: http://nodejs.org/\n[npm]: https://npmjs.org/\n[jake]: https://github.com/mde/jake\n[jshint]: https://github.com/jshint/node-jshint\n[mocha]: http://visionmedia.github.com/mocha\n[chai]: http://chaijs.com/\n\n",
  "readmeFilename": "README.md",
  "_id": "complexity-report@0.9.1",
  "_from": "complexity-report@"
}
